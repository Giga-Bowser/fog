
// Generated from fog.g4 by ANTLR 4.10.1


#include "fogLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct FogLexerStaticData final {
  FogLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  FogLexerStaticData(const FogLexerStaticData&) = delete;
  FogLexerStaticData(FogLexerStaticData&&) = delete;
  FogLexerStaticData& operator=(const FogLexerStaticData&) = delete;
  FogLexerStaticData& operator=(FogLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

std::once_flag foglexerLexerOnceFlag;
FogLexerStaticData *foglexerLexerStaticData = nullptr;

void foglexerLexerInitialize() {
  assert(foglexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<FogLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
      "T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
      "T__41", "T__42", "T__43", "T__44", "T__45", "T__46", "T__47", "T__48", 
      "T__49", "NAME", "INT", "HEX", "BINARY", "Digit", "HexDigit", "SingleLineInputCharacter", 
      "COMMENT", "LINE_COMMENT", "WS"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "';'", "'break'", "'goto'", "'while'", "'{'", "'}'", "'if'", "'} elseif'", 
      "'} else {'", "'for'", "'='", "','", "'inline {'", "'void'", "'++'", 
      "'return'", "'continue'", "'label'", "':'", "'false'", "'true'", "'('", 
      "')'", "'['", "']'", "'or'", "'and'", "'<'", "'>'", "'<='", "'>='", 
      "'!='", "'=='", "'+'", "'-'", "'*'", "'&'", "'|'", "'^'", "'<<'", 
      "'>>'", "'!'", "'~'", "'i8'", "'i16'", "'i32'", "'byte'", "'short'", 
      "'long'", "'con'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "NAME", "INT", "HEX", "BINARY", "COMMENT", "LINE_COMMENT", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,57,370,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
  	2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,
  	1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
  	8,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,
  	12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,
  	15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,
  	17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,
  	20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,
  	25,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,
  	30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,
  	36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,42,1,
  	42,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,
  	46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,
  	49,1,49,1,49,1,49,1,50,1,50,5,50,312,8,50,10,50,12,50,315,9,50,1,51,4,
  	51,318,8,51,11,51,12,51,319,1,52,1,52,4,52,324,8,52,11,52,12,52,325,1,
  	53,1,53,4,53,330,8,53,11,53,12,53,331,1,54,1,54,1,55,1,55,1,56,1,56,1,
  	57,1,57,1,57,1,57,4,57,344,8,57,11,57,12,57,345,1,57,1,57,1,57,1,57,1,
  	57,1,58,1,58,1,58,1,58,5,58,357,8,58,10,58,12,58,360,9,58,1,58,1,58,1,
  	59,4,59,365,8,59,11,59,12,59,366,1,59,1,59,1,345,0,60,1,1,3,2,5,3,7,4,
  	9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
  	17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
  	57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,
  	40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,
  	103,52,105,53,107,54,109,0,111,0,113,0,115,55,117,56,119,57,1,0,7,3,0,
  	65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,49,1,0,48,57,3,
  	0,48,57,65,70,97,102,4,0,10,10,13,13,133,133,8232,8233,3,0,9,10,12,13,
  	32,32,373,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
  	0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
  	1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
  	0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
  	0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
  	1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
  	0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,
  	0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,
  	1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,
  	0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,
  	0,0,107,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,1,121,1,0,0,
  	0,3,123,1,0,0,0,5,129,1,0,0,0,7,134,1,0,0,0,9,140,1,0,0,0,11,142,1,0,
  	0,0,13,144,1,0,0,0,15,147,1,0,0,0,17,156,1,0,0,0,19,165,1,0,0,0,21,169,
  	1,0,0,0,23,171,1,0,0,0,25,173,1,0,0,0,27,182,1,0,0,0,29,187,1,0,0,0,31,
  	190,1,0,0,0,33,197,1,0,0,0,35,206,1,0,0,0,37,212,1,0,0,0,39,214,1,0,0,
  	0,41,220,1,0,0,0,43,225,1,0,0,0,45,227,1,0,0,0,47,229,1,0,0,0,49,231,
  	1,0,0,0,51,233,1,0,0,0,53,236,1,0,0,0,55,240,1,0,0,0,57,242,1,0,0,0,59,
  	244,1,0,0,0,61,247,1,0,0,0,63,250,1,0,0,0,65,253,1,0,0,0,67,256,1,0,0,
  	0,69,258,1,0,0,0,71,260,1,0,0,0,73,262,1,0,0,0,75,264,1,0,0,0,77,266,
  	1,0,0,0,79,268,1,0,0,0,81,271,1,0,0,0,83,274,1,0,0,0,85,276,1,0,0,0,87,
  	278,1,0,0,0,89,281,1,0,0,0,91,285,1,0,0,0,93,289,1,0,0,0,95,294,1,0,0,
  	0,97,300,1,0,0,0,99,305,1,0,0,0,101,309,1,0,0,0,103,317,1,0,0,0,105,321,
  	1,0,0,0,107,327,1,0,0,0,109,333,1,0,0,0,111,335,1,0,0,0,113,337,1,0,0,
  	0,115,339,1,0,0,0,117,352,1,0,0,0,119,364,1,0,0,0,121,122,5,59,0,0,122,
  	2,1,0,0,0,123,124,5,98,0,0,124,125,5,114,0,0,125,126,5,101,0,0,126,127,
  	5,97,0,0,127,128,5,107,0,0,128,4,1,0,0,0,129,130,5,103,0,0,130,131,5,
  	111,0,0,131,132,5,116,0,0,132,133,5,111,0,0,133,6,1,0,0,0,134,135,5,119,
  	0,0,135,136,5,104,0,0,136,137,5,105,0,0,137,138,5,108,0,0,138,139,5,101,
  	0,0,139,8,1,0,0,0,140,141,5,123,0,0,141,10,1,0,0,0,142,143,5,125,0,0,
  	143,12,1,0,0,0,144,145,5,105,0,0,145,146,5,102,0,0,146,14,1,0,0,0,147,
  	148,5,125,0,0,148,149,5,32,0,0,149,150,5,101,0,0,150,151,5,108,0,0,151,
  	152,5,115,0,0,152,153,5,101,0,0,153,154,5,105,0,0,154,155,5,102,0,0,155,
  	16,1,0,0,0,156,157,5,125,0,0,157,158,5,32,0,0,158,159,5,101,0,0,159,160,
  	5,108,0,0,160,161,5,115,0,0,161,162,5,101,0,0,162,163,5,32,0,0,163,164,
  	5,123,0,0,164,18,1,0,0,0,165,166,5,102,0,0,166,167,5,111,0,0,167,168,
  	5,114,0,0,168,20,1,0,0,0,169,170,5,61,0,0,170,22,1,0,0,0,171,172,5,44,
  	0,0,172,24,1,0,0,0,173,174,5,105,0,0,174,175,5,110,0,0,175,176,5,108,
  	0,0,176,177,5,105,0,0,177,178,5,110,0,0,178,179,5,101,0,0,179,180,5,32,
  	0,0,180,181,5,123,0,0,181,26,1,0,0,0,182,183,5,118,0,0,183,184,5,111,
  	0,0,184,185,5,105,0,0,185,186,5,100,0,0,186,28,1,0,0,0,187,188,5,43,0,
  	0,188,189,5,43,0,0,189,30,1,0,0,0,190,191,5,114,0,0,191,192,5,101,0,0,
  	192,193,5,116,0,0,193,194,5,117,0,0,194,195,5,114,0,0,195,196,5,110,0,
  	0,196,32,1,0,0,0,197,198,5,99,0,0,198,199,5,111,0,0,199,200,5,110,0,0,
  	200,201,5,116,0,0,201,202,5,105,0,0,202,203,5,110,0,0,203,204,5,117,0,
  	0,204,205,5,101,0,0,205,34,1,0,0,0,206,207,5,108,0,0,207,208,5,97,0,0,
  	208,209,5,98,0,0,209,210,5,101,0,0,210,211,5,108,0,0,211,36,1,0,0,0,212,
  	213,5,58,0,0,213,38,1,0,0,0,214,215,5,102,0,0,215,216,5,97,0,0,216,217,
  	5,108,0,0,217,218,5,115,0,0,218,219,5,101,0,0,219,40,1,0,0,0,220,221,
  	5,116,0,0,221,222,5,114,0,0,222,223,5,117,0,0,223,224,5,101,0,0,224,42,
  	1,0,0,0,225,226,5,40,0,0,226,44,1,0,0,0,227,228,5,41,0,0,228,46,1,0,0,
  	0,229,230,5,91,0,0,230,48,1,0,0,0,231,232,5,93,0,0,232,50,1,0,0,0,233,
  	234,5,111,0,0,234,235,5,114,0,0,235,52,1,0,0,0,236,237,5,97,0,0,237,238,
  	5,110,0,0,238,239,5,100,0,0,239,54,1,0,0,0,240,241,5,60,0,0,241,56,1,
  	0,0,0,242,243,5,62,0,0,243,58,1,0,0,0,244,245,5,60,0,0,245,246,5,61,0,
  	0,246,60,1,0,0,0,247,248,5,62,0,0,248,249,5,61,0,0,249,62,1,0,0,0,250,
  	251,5,33,0,0,251,252,5,61,0,0,252,64,1,0,0,0,253,254,5,61,0,0,254,255,
  	5,61,0,0,255,66,1,0,0,0,256,257,5,43,0,0,257,68,1,0,0,0,258,259,5,45,
  	0,0,259,70,1,0,0,0,260,261,5,42,0,0,261,72,1,0,0,0,262,263,5,38,0,0,263,
  	74,1,0,0,0,264,265,5,124,0,0,265,76,1,0,0,0,266,267,5,94,0,0,267,78,1,
  	0,0,0,268,269,5,60,0,0,269,270,5,60,0,0,270,80,1,0,0,0,271,272,5,62,0,
  	0,272,273,5,62,0,0,273,82,1,0,0,0,274,275,5,33,0,0,275,84,1,0,0,0,276,
  	277,5,126,0,0,277,86,1,0,0,0,278,279,5,105,0,0,279,280,5,56,0,0,280,88,
  	1,0,0,0,281,282,5,105,0,0,282,283,5,49,0,0,283,284,5,54,0,0,284,90,1,
  	0,0,0,285,286,5,105,0,0,286,287,5,51,0,0,287,288,5,50,0,0,288,92,1,0,
  	0,0,289,290,5,98,0,0,290,291,5,121,0,0,291,292,5,116,0,0,292,293,5,101,
  	0,0,293,94,1,0,0,0,294,295,5,115,0,0,295,296,5,104,0,0,296,297,5,111,
  	0,0,297,298,5,114,0,0,298,299,5,116,0,0,299,96,1,0,0,0,300,301,5,108,
  	0,0,301,302,5,111,0,0,302,303,5,110,0,0,303,304,5,103,0,0,304,98,1,0,
  	0,0,305,306,5,99,0,0,306,307,5,111,0,0,307,308,5,110,0,0,308,100,1,0,
  	0,0,309,313,7,0,0,0,310,312,7,1,0,0,311,310,1,0,0,0,312,315,1,0,0,0,313,
  	311,1,0,0,0,313,314,1,0,0,0,314,102,1,0,0,0,315,313,1,0,0,0,316,318,3,
  	109,54,0,317,316,1,0,0,0,318,319,1,0,0,0,319,317,1,0,0,0,319,320,1,0,
  	0,0,320,104,1,0,0,0,321,323,5,36,0,0,322,324,3,111,55,0,323,322,1,0,0,
  	0,324,325,1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,106,1,0,0,0,327,
  	329,5,37,0,0,328,330,7,2,0,0,329,328,1,0,0,0,330,331,1,0,0,0,331,329,
  	1,0,0,0,331,332,1,0,0,0,332,108,1,0,0,0,333,334,7,3,0,0,334,110,1,0,0,
  	0,335,336,7,4,0,0,336,112,1,0,0,0,337,338,8,5,0,0,338,114,1,0,0,0,339,
  	340,5,47,0,0,340,341,5,42,0,0,341,343,1,0,0,0,342,344,9,0,0,0,343,342,
  	1,0,0,0,344,345,1,0,0,0,345,346,1,0,0,0,345,343,1,0,0,0,346,347,1,0,0,
  	0,347,348,5,42,0,0,348,349,5,47,0,0,349,350,1,0,0,0,350,351,6,57,0,0,
  	351,116,1,0,0,0,352,353,5,47,0,0,353,354,5,47,0,0,354,358,1,0,0,0,355,
  	357,3,113,56,0,356,355,1,0,0,0,357,360,1,0,0,0,358,356,1,0,0,0,358,359,
  	1,0,0,0,359,361,1,0,0,0,360,358,1,0,0,0,361,362,6,58,0,0,362,118,1,0,
  	0,0,363,365,7,6,0,0,364,363,1,0,0,0,365,366,1,0,0,0,366,364,1,0,0,0,366,
  	367,1,0,0,0,367,368,1,0,0,0,368,369,6,59,1,0,369,120,1,0,0,0,8,0,313,
  	319,325,331,345,358,366,2,0,1,0,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  foglexerLexerStaticData = staticData.release();
}

}

fogLexer::fogLexer(CharStream *input) : Lexer(input) {
  fogLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *foglexerLexerStaticData->atn, foglexerLexerStaticData->decisionToDFA, foglexerLexerStaticData->sharedContextCache);
}

fogLexer::~fogLexer() {
  delete _interpreter;
}

std::string fogLexer::getGrammarFileName() const {
  return "fog.g4";
}

const std::vector<std::string>& fogLexer::getRuleNames() const {
  return foglexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& fogLexer::getChannelNames() const {
  return foglexerLexerStaticData->channelNames;
}

const std::vector<std::string>& fogLexer::getModeNames() const {
  return foglexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& fogLexer::getVocabulary() const {
  return foglexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView fogLexer::getSerializedATN() const {
  return foglexerLexerStaticData->serializedATN;
}

const atn::ATN& fogLexer::getATN() const {
  return *foglexerLexerStaticData->atn;
}




void fogLexer::initialize() {
  std::call_once(foglexerLexerOnceFlag, foglexerLexerInitialize);
}
